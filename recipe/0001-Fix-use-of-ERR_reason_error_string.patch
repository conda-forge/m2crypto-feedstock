From 65ed2df16a01a06e200c69ec803ca375ee7529b2 Mon Sep 17 00:00:00 2001
From: Chris Burr <christopher.burr@cern.ch>
Date: Thu, 12 Dec 2024 14:52:40 +0100
Subject: [PATCH] Fix use of ERR_reason_error_string

---
 src/SWIG/_lib.i | 23 +++++++++++++++++++++--
 src/SWIG/_ssl.i | 10 +++++-----
 2 files changed, 26 insertions(+), 7 deletions(-)

diff --git a/src/SWIG/_lib.i b/src/SWIG/_lib.i
index 4321358..289d077 100644
--- a/src/SWIG/_lib.i
+++ b/src/SWIG/_lib.i
@@ -116,6 +116,7 @@ void blob_free(Blob *blob) {
 %ignore PyObject_CheckBuffer;
 %ignore PyObject_GetBuffer;
 %ignore PyBuffer_Release;
+%ignore m2_PyErr_SetString_from_errno;
 %ignore m2_PyObject_AsReadBuffer;
 %ignore m2_PyObject_AsReadBufferInt;
 %ignore m2_PyObject_GetBufferInt;
@@ -137,6 +138,25 @@ typedef struct bignum_st BIGNUM;
 
 %{
 
+/* Convert an OpenSSL error code into an SSLError */
+void m2_PyErr_SetString_from_errno(PyObject *err_type, unsigned long err) {
+    char err_reason[256];
+    unsigned int reason_code = ERR_GET_REASON(err);
+    if (reason_code == ERR_R_SYS_LIB) {
+        strerror_r(err, err_reason, sizeof(err_reason));
+    } else {
+        const char *reason = ERR_reason_error_string(err);
+        if (reason) {
+            strncpy(err_reason, reason, sizeof(err_reason) - 1);
+            err_reason[sizeof(err_reason) - 1] = '\0';
+        } else {
+            strncpy(err_reason, "Unknown error", sizeof(err_reason) - 1);
+            err_reason[sizeof(err_reason) - 1] = '\0';
+        }
+    }
+    PyErr_SetString(err_type, err_reason);
+}
+
 static int
 m2_PyObject_AsReadBuffer(PyObject * obj, const void **buffer,
 			 Py_ssize_t * buffer_len)
@@ -209,7 +229,7 @@ m2_PyObject_AsBIGNUM(PyObject* value, PyObject* _py_exc)
         return NULL;
 
     if (!(bn = BN_mpi2bn((unsigned char *)vbuf, vlen, NULL))) {
-        PyErr_SetString(_py_exc, ERR_reason_error_string(ERR_get_error()));
+        m2_PyErr_SetString_from_errno(_py_exc, ERR_get_error());
         return NULL;
         }
 
@@ -279,7 +299,6 @@ static void m2_PyErr_Msg_Caller(PyObject *err_type, const char* caller) {
     }
 }
 
-
 /* C callbacks invoked by OpenSSL; these in turn call back into
 Python. */
 
diff --git a/src/SWIG/_ssl.i b/src/SWIG/_ssl.i
index 305a556..148d968 100644
--- a/src/SWIG/_ssl.i
+++ b/src/SWIG/_ssl.i
@@ -466,18 +466,18 @@ int ssl_set_fd(SSL *ssl, int fd) {
     return ret;
 }
 
+
 static void ssl_handle_error(int ssl_err, int ret) {
     int err;
 
     switch (ssl_err) {
         case SSL_ERROR_SSL:
-            PyErr_SetString(_ssl_err,
-                            ERR_reason_error_string(ERR_get_error()));
+            m2_PyErr_SetString_from_errno(_ssl_err, ERR_get_error());
             break;
         case SSL_ERROR_SYSCALL:
             err = ERR_get_error();
             if (err)
-                PyErr_SetString(_ssl_err, ERR_reason_error_string(err));
+                m2_PyErr_SetString_from_errno(_ssl_err, err);
             else if (ret == 0)
                 PyErr_SetString(_ssl_err, "unexpected eof");
             else if (ret == -1)
@@ -770,7 +770,7 @@ PyObject *ssl_read_nbio(SSL *ssl, int num) {
         case SSL_ERROR_SYSCALL:
             err = ERR_get_error();
             if (err)
-                PyErr_SetString(_ssl_err, ERR_reason_error_string(err));
+                m2_PyErr_SetString_from_errno(_ssl_err, err);
             else if (r == 0)
                 PyErr_SetString(_ssl_err, "unexpected eof");
             else if (r == -1)
@@ -861,7 +861,7 @@ int ssl_write_nbio(SSL *ssl, PyObject *blob) {
         case SSL_ERROR_SYSCALL:
             err = ERR_get_error();
             if (err)
-                PyErr_SetString(_ssl_err, ERR_reason_error_string(err));
+                m2_PyErr_SetString_from_errno(_ssl_err, err);
             else if (r == 0)
                 PyErr_SetString(_ssl_err, "unexpected eof");
             else if (r == -1)
-- 
2.47.0

